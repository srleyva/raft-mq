// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pkg/message/message.proto

package message

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Message struct {
	Event                string   `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
	Topic                string   `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8ed2b6d5563584b, []int{0}
}

func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetEvent() string {
	if m != nil {
		return m.Event
	}
	return ""
}

func (m *Message) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

type JoinRequest struct {
	RaftAddr             string   `protobuf:"bytes,2,opt,name=raftAddr,proto3" json:"raftAddr,omitempty"`
	NodeID               string   `protobuf:"bytes,3,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JoinRequest) Reset()         { *m = JoinRequest{} }
func (m *JoinRequest) String() string { return proto.CompactTextString(m) }
func (*JoinRequest) ProtoMessage()    {}
func (*JoinRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8ed2b6d5563584b, []int{1}
}

func (m *JoinRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JoinRequest.Unmarshal(m, b)
}
func (m *JoinRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JoinRequest.Marshal(b, m, deterministic)
}
func (m *JoinRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JoinRequest.Merge(m, src)
}
func (m *JoinRequest) XXX_Size() int {
	return xxx_messageInfo_JoinRequest.Size(m)
}
func (m *JoinRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_JoinRequest.DiscardUnknown(m)
}

var xxx_messageInfo_JoinRequest proto.InternalMessageInfo

func (m *JoinRequest) GetRaftAddr() string {
	if m != nil {
		return m.RaftAddr
	}
	return ""
}

func (m *JoinRequest) GetNodeID() string {
	if m != nil {
		return m.NodeID
	}
	return ""
}

func init() {
	proto.RegisterType((*Message)(nil), "Message")
	proto.RegisterType((*JoinRequest)(nil), "JoinRequest")
}

func init() { proto.RegisterFile("pkg/message/message.proto", fileDescriptor_c8ed2b6d5563584b) }

var fileDescriptor_c8ed2b6d5563584b = []byte{
	// 244 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2c, 0xc8, 0x4e, 0xd7,
	0xcf, 0x4d, 0x2d, 0x2e, 0x4e, 0x4c, 0x4f, 0x85, 0xd1, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x52,
	0xd2, 0xe9, 0xf9, 0xf9, 0xe9, 0x39, 0xa9, 0xfa, 0x60, 0x5e, 0x52, 0x69, 0x9a, 0x7e, 0x6a, 0x6e,
	0x41, 0x49, 0x25, 0x44, 0x52, 0xc9, 0x94, 0x8b, 0xdd, 0x17, 0xa2, 0x5a, 0x48, 0x84, 0x8b, 0x35,
	0xb5, 0x2c, 0x35, 0xaf, 0x44, 0x82, 0x51, 0x81, 0x51, 0x83, 0x33, 0x08, 0xc2, 0x01, 0x89, 0x96,
	0xe4, 0x17, 0x64, 0x26, 0x4b, 0x30, 0x41, 0x44, 0xc1, 0x1c, 0x25, 0x47, 0x2e, 0x6e, 0xaf, 0xfc,
	0xcc, 0xbc, 0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x21, 0x29, 0x2e, 0x8e, 0xa2, 0xc4, 0xb4,
	0x12, 0xc7, 0x94, 0x94, 0x22, 0xa8, 0x3a, 0x38, 0x5f, 0x48, 0x8c, 0x8b, 0x2d, 0x2f, 0x3f, 0x25,
	0xd5, 0xd3, 0x45, 0x82, 0x19, 0x2c, 0x03, 0xe5, 0x19, 0xdd, 0x66, 0xe4, 0xe2, 0x82, 0x5a, 0xed,
	0x54, 0x5a, 0x2c, 0x64, 0xc0, 0xc5, 0xe5, 0x97, 0x5a, 0x0e, 0x73, 0x0b, 0x87, 0x1e, 0x94, 0x25,
	0x25, 0xa6, 0x07, 0x71, 0xbe, 0x1e, 0xcc, 0xf9, 0x7a, 0xae, 0x20, 0xe7, 0x2b, 0x31, 0x08, 0x99,
	0x72, 0xf1, 0x07, 0x14, 0xe5, 0x27, 0x27, 0xa7, 0x16, 0x17, 0xc3, 0xb4, 0xe1, 0x50, 0x2c, 0x05,
	0x37, 0x4e, 0x89, 0x41, 0xc8, 0x84, 0x8b, 0xc7, 0x27, 0xb3, 0xb8, 0x04, 0x2a, 0x50, 0x4c, 0x8c,
	0x1e, 0x03, 0x46, 0x21, 0x3d, 0x2e, 0x16, 0x90, 0x87, 0x85, 0x78, 0xf4, 0x90, 0xfc, 0x8d, 0xdb,
	0x71, 0x49, 0x6c, 0x60, 0x11, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x92, 0x75, 0x1b, 0x5e,
	0x98, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MessageBusClient is the client API for MessageBus service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MessageBusClient interface {
	NewMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*empty.Empty, error)
	ProccessMessage(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Message, error)
	ListMessages(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (MessageBus_ListMessagesClient, error)
	Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type messageBusClient struct {
	cc *grpc.ClientConn
}

func NewMessageBusClient(cc *grpc.ClientConn) MessageBusClient {
	return &messageBusClient{cc}
}

func (c *messageBusClient) NewMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/MessageBus/NewMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageBusClient) ProccessMessage(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/MessageBus/ProccessMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageBusClient) ListMessages(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (MessageBus_ListMessagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MessageBus_serviceDesc.Streams[0], "/MessageBus/ListMessages", opts...)
	if err != nil {
		return nil, err
	}
	x := &messageBusListMessagesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MessageBus_ListMessagesClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type messageBusListMessagesClient struct {
	grpc.ClientStream
}

func (x *messageBusListMessagesClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messageBusClient) Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/MessageBus/Join", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessageBusServer is the server API for MessageBus service.
type MessageBusServer interface {
	NewMessage(context.Context, *Message) (*empty.Empty, error)
	ProccessMessage(context.Context, *empty.Empty) (*Message, error)
	ListMessages(*empty.Empty, MessageBus_ListMessagesServer) error
	Join(context.Context, *JoinRequest) (*empty.Empty, error)
}

// UnimplementedMessageBusServer can be embedded to have forward compatible implementations.
type UnimplementedMessageBusServer struct {
}

func (*UnimplementedMessageBusServer) NewMessage(ctx context.Context, req *Message) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewMessage not implemented")
}
func (*UnimplementedMessageBusServer) ProccessMessage(ctx context.Context, req *empty.Empty) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProccessMessage not implemented")
}
func (*UnimplementedMessageBusServer) ListMessages(req *empty.Empty, srv MessageBus_ListMessagesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListMessages not implemented")
}
func (*UnimplementedMessageBusServer) Join(ctx context.Context, req *JoinRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Join not implemented")
}

func RegisterMessageBusServer(s *grpc.Server, srv MessageBusServer) {
	s.RegisterService(&_MessageBus_serviceDesc, srv)
}

func _MessageBus_NewMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageBusServer).NewMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MessageBus/NewMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageBusServer).NewMessage(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageBus_ProccessMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageBusServer).ProccessMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MessageBus/ProccessMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageBusServer).ProccessMessage(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageBus_ListMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessageBusServer).ListMessages(m, &messageBusListMessagesServer{stream})
}

type MessageBus_ListMessagesServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type messageBusListMessagesServer struct {
	grpc.ServerStream
}

func (x *messageBusListMessagesServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func _MessageBus_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageBusServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MessageBus/Join",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageBusServer).Join(ctx, req.(*JoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MessageBus_serviceDesc = grpc.ServiceDesc{
	ServiceName: "MessageBus",
	HandlerType: (*MessageBusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewMessage",
			Handler:    _MessageBus_NewMessage_Handler,
		},
		{
			MethodName: "ProccessMessage",
			Handler:    _MessageBus_ProccessMessage_Handler,
		},
		{
			MethodName: "Join",
			Handler:    _MessageBus_Join_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListMessages",
			Handler:       _MessageBus_ListMessages_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/message/message.proto",
}
